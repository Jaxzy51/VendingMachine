[{"C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\index.js":"1","C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\reportWebVitals.js":"2","C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\Page.js":"3","C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\Keys.js":"4"},{"size":634,"mtime":1749172677477,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1749172677539,"results":"7","hashOfConfig":"6"},{"size":7397,"mtime":1749172677410,"results":"8","hashOfConfig":"6"},{"size":816,"mtime":1749172677374,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lzfaao",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\index.js",[],[],"C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\reportWebVitals.js",[],[],"C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\Page.js",["23"],[],"import React from 'react';\nimport { \n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  Button,\n  Container,\n  Label,\n  Row, \n  Col, \n  Card, \n  CardBody, \n  CardTitle, \n  CardText,\n  Alert,\n  FormGroup\n} from 'reactstrap';\n\nimport \"./vend.css\"\n\nimport Keys from './Keys';\n\n \nclass Page extends React.Component\n{\n\n    constructor(props)\n    {\n      super(props);\n        this.state = {list: [],\n          modal: false,\n          name: '',\n          quantity: '',\n          price: '',\n          description: '',\n          error: '',\n          selectedButton: '',\n        }\n    }\n\n    toggle = () => {\n      this.setState({\n        modal: !this.state.modal,\n        name: '',\n        quantity: '',\n        price: '',\n        error: '',\n        selectedButton: '',\n      });\n    };\n\n    handleNameChange = (event)=> {\n      this.setState({ name: event.target.value });\n    };\n  \n    handleQuantityChange = (event) => {\n      this.setState({ quantity: event.target.value });\n    };\n  \n    handlePriceChange = (event) => {\n      this.setState({ price: event.target.value });\n    };\n\n    handleSubmit = () => {\n      const { name, quantity, price, selectedButton } = this.state;\n      if (!name || !quantity || !price || !selectedButton) {\n        this.setState({ error: 'Please provide correct values, or cancel' });\n        return;\n      }\n      const newItem = {\n        name,\n        quantity: parseInt(quantity),\n        price: parseFloat(price),\n        button_label: selectedButton,\n      };\n      fetch('http://localhost:5000/vend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newItem),\n      })\n        .then((response) => {\n          if (response.ok) {\n            this.fetchData();\n            this.toggle();\n          } else {\n            alert('Error adding item!');\n          }\n        })\n        .catch((error) => {\n          console.error('Error adding item:', error);\n          alert('Error adding item!');\n        });\n    };\n\n    buttonSelect=(key)=>\n    {\n        fetch('http://localhost:5000/vend', {\n            method: 'PUT',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n            button_label: key\n            })\n        })\n        .then(response => {\n            if (response.ok) {\n            this.fetchData(); \n            } else {\n            alert('Error vending item!');\n            }\n        })\n        .catch(error => {\n            console.error('Error vending item:', error);\n            alert('Error vending item!');\n        });  \n    }\n\n    updateData=(data)=>\n    {\n        this.setState({list: data});\n    }\n    //This method makes the API call to retrieve the data from the server using RESTful API\n    fetchData = () => {\n        //With Flask CORS enabled, we can directly call the server on port 5000\n        fetch('http://localhost:5000/vend')\n         .then( \n             (response) => \n             {\n                return response.json() ;\n             }\n             )//The promise response is returned, then we extract the json data\n         .then (jsonOutput => //jsonOutput now has result of the data extraction\n                  {\n                     this.updateData(jsonOutput)\n                    }\n              )\n      }\n\n    //When the component is loaded, this will call the fetchData method to retrieve the data\n    componentDidMount(){\n        this.fetchData();\n    } \n  \n    render()\n    {\n        const listItems = this.state.list.map((item) => {\n            console.log(item)\n            let cardClass, textColor;\n            if (item[1] >= 7) {\n              cardClass = 'green';\n              textColor = 'blue'\n            } else if (item[1] >= 4) {\n              cardClass = 'yellow';\n              textColor = 'black'\n            } else {\n              cardClass = 'grey';\n              textColor = 'white'\n            }\n\n            return (\n              <Col md=\"3\" key={item.button_label}>\n                <Card style = {{width: '13rem'}} className={`mb-4 ${cardClass}`}>\n                  <CardBody>\n\n                    <CardTitle className={textColor}><strong>{item[0]}({item[1]})</strong></CardTitle>\n                    <CardText className={textColor}><strong>Price: ${item[2]}</strong></CardText>\n                    <CardText className={textColor}><strong>{item[3]}</strong></CardText>\n                  </CardBody>\n                </Card>\n              </Col>\n            );\n          });\n\n          const buttonOptions = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'].map((button) => (\n            <option key={button} value={button}>\n              {button}\n            </option>\n          ));\n          \n          if (this.state.list.length > 0){\n            return (\n              <div>\n              <h3 className=\"flex-container centered\">Mini Vend</h3>\n              <Container className=\"left border3 rounded\">\n                <Row>{listItems}</Row>\n              </Container>\n\n              <Keys className=\"align-center\" callback={this.buttonSelect} />\n              <Button color=\"primary\" onClick={this.toggle}>Add Item</Button>\n              <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                <ModalHeader toggle={this.toggle}>Add New Item</ModalHeader>\n                <ModalBody>\n                  {this.state.error && <Alert color=\"danger\">{this.state.error}</Alert>}\n                  <FormGroup>\n                    <Label for=\"name\">Name</Label>\n                    <Input type=\"text\" name=\"name\" id=\"name\" value={this.state.name} onChange={this.handleNameChange} />\n                  </FormGroup>\n                  <FormGroup>\n                  <Label for=\"quantity\">Quantity</Label>\n                  <Input type=\"number\" name=\"quantity\" id=\"quantity\"  min=\"1\" max=\"20\" value={this.state.quantity} onChange={this.handleQuantityChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"price\">Price</Label>\n                    <Input type=\"number\" step=\"0.01\" name=\"price\" id=\"price\" value={this.state.price} onChange={this.handlePriceChange} />\n                </FormGroup>\n\n                <FormGroup>\n                <Label for=\"buttonSelect\">Button</Label>\n                <Input type=\"select\" name=\"buttonSelect\" value={this.state.selectedButton} onChange={(event) => this.setState({ selectedButton: event.target.value })}>\n                  <option value=\"\">Select a button</option>\n                  {buttonOptions}\n                </Input>\n                </FormGroup>\n                </ModalBody>\n\n                <ModalFooter>\n                  <Button color=\"primary\" onClick={this.handleSubmit}>Add Item</Button>{' '}\n                  <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                </ModalFooter>\n              </Modal>\n            </div> \n  );\n          }\n          else\n            return(\n                <div>\n                    <Container className='centered'>\n                    <h2>No data available</h2>\n                    <img src='./img/ded.png' alt='dead emoji'></img>\n                    <h3>Make sure the server is up and running</h3>\n                    </Container>\n                    <Keys callback={this.buttonSelect}></Keys>\n                </div>\n                    )\n    }\n}\n\n\n{}\n\nexport default Page;\n","C:\\Users\\Jasmine\\bootcamp\\VendingMachine\\src\\Keys.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":244,"column":1,"nodeType":"26","messageId":"27","endLine":244,"endColumn":3},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock"]